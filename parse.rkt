#lang racket

(require "boinc-structs.rkt")

(provide parse-host-info)
(provide parse-projects)
(provide parse-results)

(define (parse-host-info stats)
  (let ((gs (lambda (x) (get-stat-value stats x))))
    (host-info (gs 'timezone)
               (gs 'domain_name)
               (gs 'ip_addr)
               (gs 'host_cpid)
               (gs 'p_ncpus)
               (gs 'p_vendor)
               (gs 'p_model)
               (gs 'p_features)
               (gs 'p_fpops)
               (gs 'p_iops)
               (gs 'p_membw)
               (gs 'p_calculated)
               (gs 'p_vm_extensions_disabled)
               (gs 'm_nbytes)
               (gs 'm_cache)
               (gs 'm_swap)
               (gs 'd_total)
               (gs 'os_name)
               (gs 'os_version)
               (gs 'coprocs))))

(define (parse-projects stats [output (list)])
    (define (f x gs gse gns)
      (project (gs 'master_url)
               (gs 'project_name)
               (gs 'symstore)
               (gs 'user_name)
               (gs 'team_name)
               (gs 'host_venue)
               (gs 'email_hash)
               (gs 'cross_project_id)
               (gs 'external_cpid)
               (gs 'cpid_time)
               (gs 'user_total_credit)
               (gs 'user_expavg_credit)
               (gs 'user_create_time)
               (gs 'rpc_seqno)
               (gs 'userid)
               (gs 'teamid)
               (gs 'hostid)
               (gs 'host_total_credit)
               (gs 'host_expavg_credit)
               (gs 'host_create_time)
               (gs 'nrpc_failures)
               (gs 'master_fetch_failures)
               (gs 'min_rpc_time)
               (gs 'next_rpc_time)
               (gs 'rec)
               (gs 'rec_time)
               (gs 'resource_share)
               (gs 'desired_disk_usage)
               (gs 'duration_correction_factor)
               (gs 'sched_rpc_pending)
               (gs 'send_time_stats_log)
               (gs 'send_job_log)
               (gs 'njobs_success)
               (gs 'njobs_error)
               (gs 'elapsed_time)
               (gs 'dont_use_dcf)
               (parse-into-two-member-struct (gse 'rsc_backoff_time) name-value 'name 'value)
               (parse-into-two-member-struct (gse 'rsc_backoff_interval) name-value 'name 'value)
               (parse-gui-urls (get-nodes (gse 'gui_urls) 'gui_url))
               (gs 'sched_priority)
               (gs 'last_rpc_time)
               (gs 'project_files_downloaded_time)
               (gs 'project_dir)))
    (accumulate-element-list stats f))

(define (parse-gui-urls stats [output (list)])
    (if (empty? stats)
        output
        (let* ((this-url (sublists-only (rest (first stats))))
              (gs (lambda (x) (get-stat-value this-url x)))
              (gu (gui-url (gs 'name)
                           (gs 'description)
                           (gs 'url)))
               (new-output (append output (list gu))))
          (if (empty? (rest stats))
              new-output
              (parse-gui-urls (rest stats) new-output)))))

(define (parse-results stats [output (list)])
    (define (f x gs gse gns)
      (result (gs 'name)
                 (gs 'wu-name)
                 (gs 'version_num)
                 (gs 'plan_class)
                 (gs 'project_url)
                 (gs 'final_cpu_time)
                 (gs 'final_elapsed_time)
                 (gs 'exit_status)
                 (gs 'state)
                 (gs 'report_deadline)
                 (gs 'received_time)
                 (gs 'estimated_cpu_time_remaining)
                 (parse-active-task (gse 'active_task))))
    (accumulate-element-list stats f))

(define (parse-active-task stats)
    (let* ((gs (lambda (x) (get-stat-value stats  x))))
      (active-task (gs 'active_task_state)
                   (gs 'app_version_num)
                   (gs 'slot)
                   (gs 'pid)
                   (gs 'scheduler_state)
                   (gs 'checkpoint_cpu_time)
                   (gs 'fraction_done)
                   (gs 'current_cpu_time)
                   (gs 'elapsed_time)
                   (gs 'swap_size)
                   (gs 'working_set_size)
                   (gs 'working_set_size_smoothed)
                   (gs 'page_fault_rate)
                   (gs 'bytes_sent)
                   (gs 'bytes_received))))

(define (get-stat-value stats stat-name)
  (let ((stat-entry (get-node stats stat-name)))
    (if (list? stat-entry)
        (if (< (length stat-entry) 3) "" (third stat-entry))
        "")))

(define (get-node stats stat-name)
  (if (empty? stats)
      (list)
      (if (or (empty? (first stats)) (not (list? (first stats))))
          (if (empty? (rest stats))
              (list)
              (get-node (rest stats) stat-name))
          (if (eq? (first (first stats)) stat-name)
              (first stats)
              (if (empty? (rest stats))
                  (list)
                  (get-node (rest stats) stat-name))))))

(define (parse-into-two-member-struct stats struct-type member1 member2)
    (let ((gs (lambda (x) (get-stat-value stats x))))
      (struct-type (gs member1)
                   (gs member2))))

(define (get-nodes stats stat-name [nodes (list)])  
  (if (eq? (first (first stats)) stat-name)
      (if (empty? (rest stats))
          (append nodes (list (first stats)))
          (get-nodes (rest stats) stat-name (append nodes (list (first stats)))))
      (if (empty? (rest stats))
          nodes
          (get-nodes (rest stats) stat-name nodes))))

(define (accumulate-element-list elements construct-func)

  (define (make-get-stat-value elements)
    (lambda (x) (get-stat-value elements x)))

  (define (make-get-stat-element elements)
    (lambda (x) (sublists-only (get-node elements x))))
  
  (define (make-get-child-nodes elements)
    (lambda (x) (get-nodes elements x)))
  
  (define (do-it elements [output (list)])
    (if (empty? elements)
        output
        (let* ((this-element (sublists-only (first elements)))
               (gs (make-get-stat-value this-element))
               (gse (make-get-stat-element this-element))
               (gns (make-get-child-nodes this-element))
               (new-output (append output (list (construct-func this-element gs gse gns)))))
          (if (empty? (rest elements))
              new-output
              (do-it (rest elements) new-output)))))
  (do-it elements))

(define (sublists-only element)
  (if (and (list? element) (not (empty? element)))
      (filter (lambda (x)
                (and (list? x)
                     (not (empty? x))))
              (cddr element))
      (list)))
